{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_AMOUNT_IN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAmountByAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbbc5368ed3d008bba76c399aefcfed3bd74a3eb56188dc2dae0c7d46c2c15f0e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "887964",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1f8668326e13b185edf42bd734c7d59774a3a9eb71e5f94877269e5e16c0fbc2",
    "transactionHash": "0xbbc5368ed3d008bba76c399aefcfed3bd74a3eb56188dc2dae0c7d46c2c15f0e",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "887964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7f4b3ed3a5aadebbfb2cb55ecc952a07",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_AMOUNT_IN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAmountByAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ashraf Yusuf\",\"details\":\"This contract implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This function implements price feeds as our library\"},\"withdraw()\":{\"details\":\"This function uses a modifier to ensure only the owner of the contract can withdraw funds\"}},\"title\":\"A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds the contract\"},\"getAmountByAccount(address)\":{\"notice\":\"This function returns the amount donated by a funder\"},\"getFunder(uint256)\":{\"notice\":\"This function returns the list of contract funders\"},\"getOwner()\":{\"notice\":\"This function returns the owner of the contract\"},\"getPriceFeed()\":{\"notice\":\"This function returns the aggregator priceFeed\"},\"withdraw()\":{\"notice\":\"This function withdraws funds from the contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Solidity version\\npragma solidity ^0.8.8;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowdfunding\\n *  @author Ashraf Yusuf\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This contract implements price feeds as our library\\n*/\\ncontract FundMe {\\n  // Type Declarations\\n  using PriceConverter for uint256;\\n\\n  // State Variables\\n  uint256 public constant MINIMUM_AMOUNT_IN_USD = .5 * 1e18;\\n  address private immutable i_owner;\\n  address[] private s_funders;\\n  mapping(address => uint256) private s_addressToAmountMapping;\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  // Constructor\\n  constructor(address priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n  }\\n\\n  // Receive Function\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  // Fallback Function\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  /**  @notice This function funds the contract\\n    *  @dev This function implements price feeds as our library\\n  */\\n  function fund() public payable {\\n    require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_AMOUNT_IN_USD, \\\"Amount sent is too little.\\\");\\n    s_funders.push(msg.sender);\\n    s_addressToAmountMapping[msg.sender] = msg.value;\\n  }\\n\\n  /**  @notice This function withdraws funds from the contract\\n    *  @dev This function uses a modifier to ensure only the owner of the contract can withdraw funds\\n  */\\n  function withdraw() public payable onlyOwner {\\n    address[] memory funders = s_funders;\\n    for (uint256 index=0; index<funders.length; index++){\\n      address funder= funders[index];\\n      s_addressToAmountMapping[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    require(callSuccess, \\\"Withdrawal failed\\\");\\n  }\\n\\n  /**  @notice This function returns the owner of the contract\\n  */\\n  function getOwner() public view returns(address) {\\n    return i_owner;\\n  }\\n\\n  /**  @notice This function returns the list of contract funders\\n  */\\n  function getFunder(uint256 index) public view returns(address) {\\n    return s_funders[index];\\n  }\\n\\n  /**  @notice This function returns the amount donated by a funder\\n  */\\n  function getAmountByAccount(address funder) public view returns(uint256) {\\n    return s_addressToAmountMapping[funder];\\n  }\\n\\n  /**  @notice This function returns the aggregator priceFeed\\n  */\\n  function getPriceFeed() public view returns(AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\",\"keccak256\":\"0x604744d1838c9d9338264adbe3dc264581e57f8f1a35372316765a5c25a3513a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        (,int256 price,,,) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(uint256 _ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPriceInUsd = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPriceInUsd * _ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x697f908548b6377c9381dbfeb06e4360eae7694e97c9bc3072eb3386874114a6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051620010163803806200101683398181016040528101906100349190610115565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b60805160601c610eae62000168600039600081816102c601526105780152610eae6000f3fe6080604052600436106100745760003560e01c80639e87a5cd1161004e5780639e87a5cd146100ed578063b60d428814610118578063d672730714610122578063d7b4750c1461015f57610083565b80633ccfd60b1461008d57806369aa724014610097578063893d20e8146100c257610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102c4565b005b3480156100a357600080fd5b506100ac610568565b6040516100b991906107f2565b60405180910390f35b3480156100ce57600080fd5b506100d7610574565b6040516100e4919061084e565b60405180910390f35b3480156100f957600080fd5b5061010261059c565b60405161010f91906108c8565b60405180910390f35b61012061019c565b005b34801561012e57600080fd5b5061014960048036038101906101449190610914565b6105c6565b60405161015691906107f2565b60405180910390f35b34801561016b57600080fd5b506101866004803603810190610181919061096d565b61060f565b604051610193919061084e565b60405180910390f35b6706f05b59d3b200006101da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065690919063ffffffff16565b101561021b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610212906109f7565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610349576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156103cc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610382575b5050505050905060005b81518110156104575760008282815181106103f4576103f3610a17565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044f90610a75565b9150506103d6565b50600067ffffffffffffffff81111561047357610472610abe565b5b6040519080825280602002602001820160405280156104a15781602001602082028036833780820191505090505b50600090805190602001906104b7929190610732565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104de90610b1e565b60006040518083038185875af1925050503d806000811461051b576040519150601f19603f3d011682016040523d82523d6000602084013e610520565b606091505b5050905080610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90610b7f565b60405180910390fd5b5050565b6706f05b59d3b2000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061062457610623610a17565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066283610692565b90506000670de0b6b3a7640000858361067b9190610b9f565b6106859190610c28565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106db57600080fd5b505afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190610ce6565b5050509150506402540be4008161072a9190610d61565b915050919050565b8280548282559060005260206000209081019282156107ab579160200282015b828111156107aa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610752565b5b5090506107b891906107bc565b5090565b5b808211156107d55760008160009055506001016107bd565b5090565b6000819050919050565b6107ec816107d9565b82525050565b600060208201905061080760008301846107e3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108388261080d565b9050919050565b6108488161082d565b82525050565b6000602082019050610863600083018461083f565b92915050565b6000819050919050565b600061088e6108896108848461080d565b610869565b61080d565b9050919050565b60006108a082610873565b9050919050565b60006108b282610895565b9050919050565b6108c2816108a7565b82525050565b60006020820190506108dd60008301846108b9565b92915050565b600080fd5b6108f18161082d565b81146108fc57600080fd5b50565b60008135905061090e816108e8565b92915050565b60006020828403121561092a576109296108e3565b5b6000610938848285016108ff565b91505092915050565b61094a816107d9565b811461095557600080fd5b50565b60008135905061096781610941565b92915050565b600060208284031215610983576109826108e3565b5b600061099184828501610958565b91505092915050565b600082825260208201905092915050565b7f416d6f756e742073656e7420697320746f6f206c6974746c652e000000000000600082015250565b60006109e1601a8361099a565b91506109ec826109ab565b602082019050919050565b60006020820190508181036000830152610a10816109d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a80826107d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ab357610ab2610a46565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b08600083610aed565b9150610b1382610af8565b600082019050919050565b6000610b2982610afb565b9150819050919050565b7f5769746864726177616c206661696c6564000000000000000000000000000000600082015250565b6000610b6960118361099a565b9150610b7482610b33565b602082019050919050565b60006020820190508181036000830152610b9881610b5c565b9050919050565b6000610baa826107d9565b9150610bb5836107d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bee57610bed610a46565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c33826107d9565b9150610c3e836107d9565b925082610c4e57610c4d610bf9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c7881610c59565b8114610c8357600080fd5b50565b600081519050610c9581610c6f565b92915050565b6000819050919050565b610cae81610c9b565b8114610cb957600080fd5b50565b600081519050610ccb81610ca5565b92915050565b600081519050610ce081610941565b92915050565b600080600080600060a08688031215610d0257610d016108e3565b5b6000610d1088828901610c86565b9550506020610d2188828901610cbc565b9450506040610d3288828901610cd1565b9350506060610d4388828901610cd1565b9250506080610d5488828901610c86565b9150509295509295909350565b6000610d6c82610c9b565b9150610d7783610c9b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610db657610db5610a46565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610df357610df2610a46565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3057610e2f610a46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6d57610e6c610a46565b5b82820290509291505056fea2646970667358221220b21e6fb2b96d7cddb2b1bf63b62a70a07fea69ac4fe1d3b35309afb26a03968664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c80639e87a5cd1161004e5780639e87a5cd146100ed578063b60d428814610118578063d672730714610122578063d7b4750c1461015f57610083565b80633ccfd60b1461008d57806369aa724014610097578063893d20e8146100c257610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102c4565b005b3480156100a357600080fd5b506100ac610568565b6040516100b991906107f2565b60405180910390f35b3480156100ce57600080fd5b506100d7610574565b6040516100e4919061084e565b60405180910390f35b3480156100f957600080fd5b5061010261059c565b60405161010f91906108c8565b60405180910390f35b61012061019c565b005b34801561012e57600080fd5b5061014960048036038101906101449190610914565b6105c6565b60405161015691906107f2565b60405180910390f35b34801561016b57600080fd5b506101866004803603810190610181919061096d565b61060f565b604051610193919061084e565b60405180910390f35b6706f05b59d3b200006101da600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065690919063ffffffff16565b101561021b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610212906109f7565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610349576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156103cc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610382575b5050505050905060005b81518110156104575760008282815181106103f4576103f3610a17565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044f90610a75565b9150506103d6565b50600067ffffffffffffffff81111561047357610472610abe565b5b6040519080825280602002602001820160405280156104a15781602001602082028036833780820191505090505b50600090805190602001906104b7929190610732565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104de90610b1e565b60006040518083038185875af1925050503d806000811461051b576040519150601f19603f3d011682016040523d82523d6000602084013e610520565b606091505b5050905080610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055b90610b7f565b60405180910390fd5b5050565b6706f05b59d3b2000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080828154811061062457610623610a17565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066283610692565b90506000670de0b6b3a7640000858361067b9190610b9f565b6106859190610c28565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106db57600080fd5b505afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190610ce6565b5050509150506402540be4008161072a9190610d61565b915050919050565b8280548282559060005260206000209081019282156107ab579160200282015b828111156107aa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610752565b5b5090506107b891906107bc565b5090565b5b808211156107d55760008160009055506001016107bd565b5090565b6000819050919050565b6107ec816107d9565b82525050565b600060208201905061080760008301846107e3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108388261080d565b9050919050565b6108488161082d565b82525050565b6000602082019050610863600083018461083f565b92915050565b6000819050919050565b600061088e6108896108848461080d565b610869565b61080d565b9050919050565b60006108a082610873565b9050919050565b60006108b282610895565b9050919050565b6108c2816108a7565b82525050565b60006020820190506108dd60008301846108b9565b92915050565b600080fd5b6108f18161082d565b81146108fc57600080fd5b50565b60008135905061090e816108e8565b92915050565b60006020828403121561092a576109296108e3565b5b6000610938848285016108ff565b91505092915050565b61094a816107d9565b811461095557600080fd5b50565b60008135905061096781610941565b92915050565b600060208284031215610983576109826108e3565b5b600061099184828501610958565b91505092915050565b600082825260208201905092915050565b7f416d6f756e742073656e7420697320746f6f206c6974746c652e000000000000600082015250565b60006109e1601a8361099a565b91506109ec826109ab565b602082019050919050565b60006020820190508181036000830152610a10816109d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a80826107d9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ab357610ab2610a46565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b08600083610aed565b9150610b1382610af8565b600082019050919050565b6000610b2982610afb565b9150819050919050565b7f5769746864726177616c206661696c6564000000000000000000000000000000600082015250565b6000610b6960118361099a565b9150610b7482610b33565b602082019050919050565b60006020820190508181036000830152610b9881610b5c565b9050919050565b6000610baa826107d9565b9150610bb5836107d9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bee57610bed610a46565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c33826107d9565b9150610c3e836107d9565b925082610c4e57610c4d610bf9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c7881610c59565b8114610c8357600080fd5b50565b600081519050610c9581610c6f565b92915050565b6000819050919050565b610cae81610c9b565b8114610cb957600080fd5b50565b600081519050610ccb81610ca5565b92915050565b600081519050610ce081610941565b92915050565b600080600080600060a08688031215610d0257610d016108e3565b5b6000610d1088828901610c86565b9550506020610d2188828901610cbc565b9450506040610d3288828901610cd1565b9350506060610d4388828901610cd1565b9250506080610d5488828901610c86565b9150509295509295909350565b6000610d6c82610c9b565b9150610d7783610c9b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610db657610db5610a46565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610df357610df2610a46565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e3057610e2f610a46565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6d57610e6c610a46565b5b82820290509291505056fea2646970667358221220b21e6fb2b96d7cddb2b1bf63b62a70a07fea69ac4fe1d3b35309afb26a03968664736f6c63430008080033",
  "devdoc": {
    "author": "Ashraf Yusuf",
    "details": "This contract implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This function implements price feeds as our library"
      },
      "withdraw()": {
        "details": "This function uses a modifier to ensure only the owner of the contract can withdraw funds"
      }
    },
    "title": "A contract for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds the contract"
      },
      "getAmountByAccount(address)": {
        "notice": "This function returns the amount donated by a funder"
      },
      "getFunder(uint256)": {
        "notice": "This function returns the list of contract funders"
      },
      "getOwner()": {
        "notice": "This function returns the owner of the contract"
      },
      "getPriceFeed()": {
        "notice": "This function returns the aggregator priceFeed"
      },
      "withdraw()": {
        "notice": "This function withdraws funds from the contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}