{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// Solidity version\npragma solidity ^0.8.8;\n\n// Imports\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Error Codes\nerror FundMe__NotOwner();\n\n/** @title A contract for crowdfunding\n *  @author Ashraf Yusuf\n *  @notice This contract is to demo a sample funding contract\n *  @dev This contract implements price feeds as our library\n*/\ncontract FundMe {\n  // Type Declarations\n  using PriceConverter for uint256;\n\n  // State Variables\n  uint256 public constant MINIMUM_AMOUNT_IN_USD = .5 * 1e18;\n  address private immutable i_owner;\n  address[] private s_funders;\n  mapping(address => uint256) private s_addressToAmountMapping;\n  AggregatorV3Interface private s_priceFeed;\n\n  // Modifiers\n  modifier onlyOwner() {\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\n    _;\n  }\n\n  // Constructor\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  // Receive Function\n  receive() external payable {\n    fund();\n  }\n\n  // Fallback Function\n  fallback() external payable {\n    fund();\n  }\n\n  /**  @notice This function funds the contract\n    *  @dev This function implements price feeds as our library\n  */\n  function fund() public payable {\n    require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_AMOUNT_IN_USD, \"Amount sent is too little.\");\n    s_funders.push(msg.sender);\n    s_addressToAmountMapping[msg.sender] = msg.value;\n  }\n\n  /**  @notice This function withdraws funds from the contract\n    *  @dev This function uses a modifier to ensure only the owner of the contract can withdraw funds\n  */\n  function withdraw() public payable onlyOwner {\n    address[] memory funders = s_funders;\n    for (uint256 index=0; index<funders.length; index++){\n      address funder= funders[index];\n      s_addressToAmountMapping[funder] = 0;\n    }\n    s_funders = new address[](0);\n    (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n    require(callSuccess, \"Withdrawal failed\");\n  }\n\n  /**  @notice This function returns the owner of the contract\n  */\n  function getOwner() public view returns(address) {\n    return i_owner;\n  }\n\n  /**  @notice This function returns the list of contract funders\n  */\n  function getFunder(uint256 index) public view returns(address) {\n    return s_funders[index];\n  }\n\n  /**  @notice This function returns the amount donated by a funder\n  */\n  function getAmountByAccount(address funder) public view returns(uint256) {\n    return s_addressToAmountMapping[funder];\n  }\n\n  /**  @notice This function returns the aggregator priceFeed\n  */\n  function getPriceFeed() public view returns(AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 _ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPriceInUsd = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPriceInUsd * _ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}